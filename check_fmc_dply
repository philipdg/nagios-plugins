#!/usr/bin/env python3
 
# check_fmc_dply v0.1
# 
# Check via API for outstanding deployments
# (rough first draft)
#
import argparse
import arrow 
import json
import sys
import requests
 
from sys import exit
import warnings
warnings.filterwarnings("ignore")

def simplify(isodate):
	return str(arrow.get(isodate).to("Europe/London").datetime)[:-16]

parser = argparse.ArgumentParser(description='Check FMC Outstanding Deployments')
optional = parser._action_groups.pop()
required = parser.add_argument_group('required arguments')
required.add_argument('-H', dest='host', action='store', help='FMC Host')
required.add_argument('-l', dest='username', action='store', help='Username')
required.add_argument('-a', dest='password', action='store', help='Password')
optional.add_argument('-v', dest='verbose', action='store', default='0', help='0=Normal O/P, 1=Full O/P')
parser._action_groups.append(optional)
args = parser.parse_args()

username = args.username
password = args.password
server = args.host

dpResponse = None
headers = {'Content-Type': 'application/json'}

api_auth_path = "/api/fmc_platform/v1/auth/generatetoken"
api_path = "/api/fmc_config/v1/domain/e276abec-e0f2-11e3-8169-6d9ed49b625f/deployment/deployabledevices?expanded=false"    # param

auth_url = "https://" + server + api_auth_path

try:
    dpResponse = requests.post(auth_url, headers=headers, auth=requests.auth.HTTPBasicAuth(username,password), verify=False)

    auth_headers = dpResponse.headers
    auth_token = auth_headers.get('X-auth-access-token', default=None)
    if auth_token == None:
        print("auth_token not found. Exiting...")
        exit(2)
except Exception as err:
    print ("Error in generating auth token --> "+str(err))
    exit(2)
 
headers['X-auth-access-token']=auth_token
 
url = "https://" + server + api_path
if (url[-1] == '/'):
    url = url[:-1]
 
try:
    dpResponse = requests.get(url, headers=headers, verify=False)
    status_code = dpResponse.status_code
    resp = dpResponse.text
    if (status_code == 200):
        #print("GET successful. Response data --> ")
        json_resp = json.loads(resp)
        #print(json.dumps(json_resp,sort_keys=True,indent=4, separators=(',', ': ')))
        if json_resp['paging']['count'] == 0:
            print("OK - No outstanding deployments found")
            exit(0)
        else:
            print("WARNING - %s outstanding deployments found" % json_resp['paging']['count'])
            if int(args.verbose) > 0:
                #print("<ul>",end='')
                for device in json_resp['items']:
                    print(":: %s" % device['name'])
                #print("</ul>")
        exit(1)
    else:
        dpResponse.raise_for_status()
        print("Error occurred in GET --> "+resp)
except requests.exceptions.HTTPError as err:
    print ("Error in connection --> "+str(err)) 
finally:
    if dpResponse : dpResponse.close()

